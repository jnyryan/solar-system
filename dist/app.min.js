(function() {
  var Earth, Game, GridObject, Planet, Sun, game,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Game = (function() {
    function Game() {
      this.render = bind(this.render, this);
      this.animate = bind(this.animate, this);
      this.animateLoop = [];
      this.scene = new THREE.Scene;
      this.camera = new THREE.OrthographicCamera(window.innerWidth / -2, window.innerWidth / 2, window.innerHeight / 2, window.innerHeight / -2, -500, 1000);
      this.renderer = new THREE.WebGLRenderer;
      this.renderer.setSize(window.innerWidth, window.innerHeight);
      document.body.appendChild(this.renderer.domElement);
      this.controls = new THREE.OrbitControls(this.camera);
    }

    Game.prototype.init = function() {
      this.cameraSetup();
      this.lighting();
      this.animate();
      this.buildModels();
      return this.controlsSetup();
    };

    Game.prototype.lighting = function() {
      var ambientlight;
      ambientlight = new THREE.AmbientLight(0xffffff);
      return this.scene.add(ambientlight);
    };

    Game.prototype.cameraSetup = function() {
      this.camera.position.x = 200;
      this.camera.position.y = 100;
      this.camera.position.z = 200;
      return this.camera.lookAt(this.scene.position);
    };

    Game.prototype.controlsSetup = function() {
      this.controls.minDistance = 100;
      return this.controls.maxDistance = 200;
    };

    Game.prototype.buildModels = function() {
      this.animateLoop.push(new GridObject(this.scene));
      this.animateLoop.push(new Sun(this.scene));
      return this.animateLoop.push(new Earth(this.scene));
    };

    Game.prototype.animate = function() {
      var a, j, len, ref, timer;
      requestAnimationFrame(this.animate);
      timer = Date.now() * 0.0001;
      ref = this.animateLoop;
      for (j = 0, len = ref.length; j < len; j++) {
        a = ref[j];
        if (typeof a.animate === "function") {
          a.animate();
        }
      }
      this.camera.position.x = Math.cos(timer) * 200;
      this.camera.position.z = Math.sin(timer) * 200;
      this.camera.lookAt(this.scene.position);
      this.controls.update();
      return this.render();
    };

    Game.prototype.render = function() {
      return this.renderer.render(this.scene, this.camera);
    };

    return Game;

  })();

  GridObject = (function() {
    function GridObject(scene) {
      var geometry, i, line, material, size, step;
      size = 500;
      step = 50;
      geometry = new THREE.Geometry;
      i = -size;
      while (i <= size) {
        geometry.vertices.push(new THREE.Vector3(-size, -100, i));
        geometry.vertices.push(new THREE.Vector3(size, -100, i));
        geometry.vertices.push(new THREE.Vector3(i, -100, -size));
        geometry.vertices.push(new THREE.Vector3(i, -100, size));
        i += step;
      }
      material = new THREE.LineBasicMaterial({
        color: 0xffffff,
        opacity: 0.2
      });
      line = new THREE.LineSegments(geometry, material);
      scene.add(line);
    }

    return GridObject;

  })();

  Planet = (function() {
    function Planet(scene1) {
      this.scene = scene1;
      this.drawPlanet = bind(this.drawPlanet, this);
    }

    Planet.prototype.drawPlanet = function(planet) {
      var geometry, material, radius, rings, segments, texture;
      radius = planet.radius;
      segments = 16;
      rings = 16;
      texture = THREE.ImageUtils.loadTexture(planet.imageLocation);
      texture.repeat.set(1, 1);
      geometry = new THREE.SphereGeometry(radius, segments, rings);
      material = new THREE.MeshLambertMaterial({
        map: texture,
        emissive: 0x000000
      });
      this.mesh = new THREE.Mesh(geometry, material);
      this.mesh.position.x = planet.position.x;
      this.mesh.position.y = planet.position.y;
      return this.scene.add(this.mesh);
    };

    return Planet;

  })();

  Sun = (function(superClass) {
    extend(Sun, superClass);

    function Sun(scene1) {
      this.scene = scene1;
      this.animate = bind(this.animate, this);
      Sun.__super__.constructor.call(this, this.scene);
      this.planet = {
        name: 'Sun',
        imageLocation: 'img/sun.jpg',
        radius: 80.0,
        position: {
          x: 0,
          y: 0,
          z: 0
        },
        rotation: {
          x: 0,
          y: 0.001,
          z: 0
        }
      };
      this.drawPlanet(this.planet);
    }

    Sun.prototype.animate = function() {
      this.mesh.rotation.x += this.planet.rotation.x;
      return this.mesh.rotation.y += this.planet.rotation.y;
    };

    return Sun;

  })(Planet);

  Earth = (function(superClass) {
    extend(Earth, superClass);

    function Earth(scene1) {
      this.scene = scene1;
      this.animate = bind(this.animate, this);
      Earth.__super__.constructor.call(this, this.scene);
      this.planet = {
        name: 'Earth',
        imageLocation: 'img/earth.jpg',
        radius: 20,
        position: {
          x: 400,
          y: 0,
          z: 400
        },
        rotation: {
          x: 0,
          y: 0.01,
          z: 0
        }
      };
      this.drawPlanet(this.planet);
    }

    Earth.prototype.animate = function() {
      this.mesh.rotation.x += this.planet.rotation.x;
      return this.mesh.rotation.y += this.planet.rotation.y;
    };

    return Earth;

  })(Planet);


  /*
  Go
   */

  game = new Game();

  game.init();

}).call(this);
